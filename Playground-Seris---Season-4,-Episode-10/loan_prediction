{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84894,"databundleVersionId":9709193,"sourceType":"competition"}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-03T19:33:38.454403Z","iopub.execute_input":"2024-10-03T19:33:38.454866Z","iopub.status.idle":"2024-10-03T19:33:39.845945Z","shell.execute_reply.started":"2024-10-03T19:33:38.454822Z","shell.execute_reply":"2024-10-03T19:33:39.844663Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e10/sample_submission.csv\n/kaggle/input/playground-series-s4e10/train.csv\n/kaggle/input/playground-series-s4e10/test.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import roc_auc_score, roc_curve","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:06.686446Z","iopub.execute_input":"2024-10-03T20:14:06.686972Z","iopub.status.idle":"2024-10-03T20:14:06.692773Z","shell.execute_reply.started":"2024-10-03T20:14:06.686926Z","shell.execute_reply":"2024-10-03T20:14:06.691479Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/playground-series-s4e10/train.csv\")\ntrain.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:08.639310Z","iopub.execute_input":"2024-10-03T20:14:08.639734Z","iopub.status.idle":"2024-10-03T20:14:08.781613Z","shell.execute_reply.started":"2024-10-03T20:14:08.639695Z","shell.execute_reply":"2024-10-03T20:14:08.780269Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"   id  person_age  person_income person_home_ownership  person_emp_length  \\\n0   0          37          35000                  RENT                0.0   \n1   1          22          56000                   OWN                6.0   \n2   2          29          28800                   OWN                8.0   \n3   3          30          70000                  RENT               14.0   \n4   4          22          60000                  RENT                2.0   \n\n  loan_intent loan_grade  loan_amnt  loan_int_rate  loan_percent_income  \\\n0   EDUCATION          B       6000          11.49                 0.17   \n1     MEDICAL          C       4000          13.35                 0.07   \n2    PERSONAL          A       6000           8.90                 0.21   \n3     VENTURE          B      12000          11.11                 0.17   \n4     MEDICAL          A       6000           6.92                 0.10   \n\n  cb_person_default_on_file  cb_person_cred_hist_length  loan_status  \n0                         N                          14            0  \n1                         N                           2            0  \n2                         N                          10            0  \n3                         N                           5            0  \n4                         N                           3            0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_home_ownership</th>\n      <th>person_emp_length</th>\n      <th>loan_intent</th>\n      <th>loan_grade</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_default_on_file</th>\n      <th>cb_person_cred_hist_length</th>\n      <th>loan_status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>37</td>\n      <td>35000</td>\n      <td>RENT</td>\n      <td>0.0</td>\n      <td>EDUCATION</td>\n      <td>B</td>\n      <td>6000</td>\n      <td>11.49</td>\n      <td>0.17</td>\n      <td>N</td>\n      <td>14</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>22</td>\n      <td>56000</td>\n      <td>OWN</td>\n      <td>6.0</td>\n      <td>MEDICAL</td>\n      <td>C</td>\n      <td>4000</td>\n      <td>13.35</td>\n      <td>0.07</td>\n      <td>N</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>29</td>\n      <td>28800</td>\n      <td>OWN</td>\n      <td>8.0</td>\n      <td>PERSONAL</td>\n      <td>A</td>\n      <td>6000</td>\n      <td>8.90</td>\n      <td>0.21</td>\n      <td>N</td>\n      <td>10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>30</td>\n      <td>70000</td>\n      <td>RENT</td>\n      <td>14.0</td>\n      <td>VENTURE</td>\n      <td>B</td>\n      <td>12000</td>\n      <td>11.11</td>\n      <td>0.17</td>\n      <td>N</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>22</td>\n      <td>60000</td>\n      <td>RENT</td>\n      <td>2.0</td>\n      <td>MEDICAL</td>\n      <td>A</td>\n      <td>6000</td>\n      <td>6.92</td>\n      <td>0.10</td>\n      <td>N</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test = pd.read_csv(\"/kaggle/input/playground-series-s4e10/test.csv\")\ntest.head()","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:10.381517Z","iopub.execute_input":"2024-10-03T20:14:10.381949Z","iopub.status.idle":"2024-10-03T20:14:10.469769Z","shell.execute_reply.started":"2024-10-03T20:14:10.381908Z","shell.execute_reply":"2024-10-03T20:14:10.468622Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"      id  person_age  person_income person_home_ownership  person_emp_length  \\\n0  58645          23          69000                  RENT                3.0   \n1  58646          26          96000              MORTGAGE                6.0   \n2  58647          26          30000                  RENT                5.0   \n3  58648          33          50000                  RENT                4.0   \n4  58649          26         102000              MORTGAGE                8.0   \n\n         loan_intent loan_grade  loan_amnt  loan_int_rate  \\\n0    HOMEIMPROVEMENT          F      25000          15.76   \n1           PERSONAL          C      10000          12.68   \n2            VENTURE          E       4000          17.19   \n3  DEBTCONSOLIDATION          A       7000           8.90   \n4    HOMEIMPROVEMENT          D      15000          16.32   \n\n   loan_percent_income cb_person_default_on_file  cb_person_cred_hist_length  \n0                 0.36                         N                           2  \n1                 0.10                         Y                           4  \n2                 0.13                         Y                           2  \n3                 0.14                         N                           7  \n4                 0.15                         Y                           4  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_home_ownership</th>\n      <th>person_emp_length</th>\n      <th>loan_intent</th>\n      <th>loan_grade</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_default_on_file</th>\n      <th>cb_person_cred_hist_length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>58645</td>\n      <td>23</td>\n      <td>69000</td>\n      <td>RENT</td>\n      <td>3.0</td>\n      <td>HOMEIMPROVEMENT</td>\n      <td>F</td>\n      <td>25000</td>\n      <td>15.76</td>\n      <td>0.36</td>\n      <td>N</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58646</td>\n      <td>26</td>\n      <td>96000</td>\n      <td>MORTGAGE</td>\n      <td>6.0</td>\n      <td>PERSONAL</td>\n      <td>C</td>\n      <td>10000</td>\n      <td>12.68</td>\n      <td>0.10</td>\n      <td>Y</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>58647</td>\n      <td>26</td>\n      <td>30000</td>\n      <td>RENT</td>\n      <td>5.0</td>\n      <td>VENTURE</td>\n      <td>E</td>\n      <td>4000</td>\n      <td>17.19</td>\n      <td>0.13</td>\n      <td>Y</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>58648</td>\n      <td>33</td>\n      <td>50000</td>\n      <td>RENT</td>\n      <td>4.0</td>\n      <td>DEBTCONSOLIDATION</td>\n      <td>A</td>\n      <td>7000</td>\n      <td>8.90</td>\n      <td>0.14</td>\n      <td>N</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>58649</td>\n      <td>26</td>\n      <td>102000</td>\n      <td>MORTGAGE</td>\n      <td>8.0</td>\n      <td>HOMEIMPROVEMENT</td>\n      <td>D</td>\n      <td>15000</td>\n      <td>16.32</td>\n      <td>0.15</td>\n      <td>Y</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"X = train.drop([\"id\",\"loan_status\"],axis=1)\ny = train[\"loan_status\"]\nX_submit = test.drop([\"id\"],axis=1)\nsubmit_id = test[\"id\"]","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:12.795348Z","iopub.execute_input":"2024-10-03T20:14:12.795774Z","iopub.status.idle":"2024-10-03T20:14:12.808366Z","shell.execute_reply.started":"2024-10-03T20:14:12.795732Z","shell.execute_reply":"2024-10-03T20:14:12.807340Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"X.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-03T19:45:28.683813Z","iopub.execute_input":"2024-10-03T19:45:28.684723Z","iopub.status.idle":"2024-10-03T19:45:28.744892Z","shell.execute_reply.started":"2024-10-03T19:45:28.684640Z","shell.execute_reply":"2024-10-03T19:45:28.743676Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 58645 entries, 0 to 58644\nData columns (total 11 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   person_age                  58645 non-null  int64  \n 1   person_income               58645 non-null  int64  \n 2   person_home_ownership       58645 non-null  object \n 3   person_emp_length           58645 non-null  float64\n 4   loan_intent                 58645 non-null  object \n 5   loan_grade                  58645 non-null  object \n 6   loan_amnt                   58645 non-null  int64  \n 7   loan_int_rate               58645 non-null  float64\n 8   loan_percent_income         58645 non-null  float64\n 9   cb_person_default_on_file   58645 non-null  object \n 10  cb_person_cred_hist_length  58645 non-null  int64  \ndtypes: float64(3), int64(4), object(4)\nmemory usage: 4.9+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"X.describe()","metadata":{"execution":{"iopub.status.busy":"2024-10-03T19:45:49.512693Z","iopub.execute_input":"2024-10-03T19:45:49.513196Z","iopub.status.idle":"2024-10-03T19:45:49.569411Z","shell.execute_reply.started":"2024-10-03T19:45:49.513153Z","shell.execute_reply":"2024-10-03T19:45:49.568281Z"},"collapsed":true,"jupyter":{"outputs_hidden":true},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"         person_age  person_income  person_emp_length     loan_amnt  \\\ncount  58645.000000   5.864500e+04       58645.000000  58645.000000   \nmean      27.550857   6.404617e+04           4.701015   9217.556518   \nstd        6.033216   3.793111e+04           3.959784   5563.807384   \nmin       20.000000   4.200000e+03           0.000000    500.000000   \n25%       23.000000   4.200000e+04           2.000000   5000.000000   \n50%       26.000000   5.800000e+04           4.000000   8000.000000   \n75%       30.000000   7.560000e+04           7.000000  12000.000000   \nmax      123.000000   1.900000e+06         123.000000  35000.000000   \n\n       loan_int_rate  loan_percent_income  cb_person_cred_hist_length  \ncount   58645.000000         58645.000000                58645.000000  \nmean       10.677874             0.159238                    5.813556  \nstd         3.034697             0.091692                    4.029196  \nmin         5.420000             0.000000                    2.000000  \n25%         7.880000             0.090000                    3.000000  \n50%        10.750000             0.140000                    4.000000  \n75%        12.990000             0.210000                    8.000000  \nmax        23.220000             0.830000                   30.000000  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_emp_length</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_cred_hist_length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>58645.000000</td>\n      <td>5.864500e+04</td>\n      <td>58645.000000</td>\n      <td>58645.000000</td>\n      <td>58645.000000</td>\n      <td>58645.000000</td>\n      <td>58645.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>27.550857</td>\n      <td>6.404617e+04</td>\n      <td>4.701015</td>\n      <td>9217.556518</td>\n      <td>10.677874</td>\n      <td>0.159238</td>\n      <td>5.813556</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>6.033216</td>\n      <td>3.793111e+04</td>\n      <td>3.959784</td>\n      <td>5563.807384</td>\n      <td>3.034697</td>\n      <td>0.091692</td>\n      <td>4.029196</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>20.000000</td>\n      <td>4.200000e+03</td>\n      <td>0.000000</td>\n      <td>500.000000</td>\n      <td>5.420000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>23.000000</td>\n      <td>4.200000e+04</td>\n      <td>2.000000</td>\n      <td>5000.000000</td>\n      <td>7.880000</td>\n      <td>0.090000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>26.000000</td>\n      <td>5.800000e+04</td>\n      <td>4.000000</td>\n      <td>8000.000000</td>\n      <td>10.750000</td>\n      <td>0.140000</td>\n      <td>4.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>30.000000</td>\n      <td>7.560000e+04</td>\n      <td>7.000000</td>\n      <td>12000.000000</td>\n      <td>12.990000</td>\n      <td>0.210000</td>\n      <td>8.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>123.000000</td>\n      <td>1.900000e+06</td>\n      <td>123.000000</td>\n      <td>35000.000000</td>\n      <td>23.220000</td>\n      <td>0.830000</td>\n      <td>30.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"dummy_list = [\"person_home_ownership\",\"loan_intent\"]\n\nX = pd.get_dummies(X,columns=dummy_list)","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:17.063537Z","iopub.execute_input":"2024-10-03T20:14:17.063986Z","iopub.status.idle":"2024-10-03T20:14:17.096997Z","shell.execute_reply.started":"2024-10-03T20:14:17.063944Z","shell.execute_reply":"2024-10-03T20:14:17.095666Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"pd.unique(X[\"loan_grade\"])","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:19.044990Z","iopub.execute_input":"2024-10-03T20:14:19.046189Z","iopub.status.idle":"2024-10-03T20:14:19.058643Z","shell.execute_reply.started":"2024-10-03T20:14:19.046133Z","shell.execute_reply":"2024-10-03T20:14:19.057331Z"},"trusted":true},"execution_count":39,"outputs":[{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"array(['B', 'C', 'A', 'D', 'E', 'F', 'G'], dtype=object)"},"metadata":{}}]},{"cell_type":"code","source":"grade_mapping = {\n    'A': 1,\n    'B': 2,\n    'C': 3,\n    'D': 4,\n    'E': 5,\n    'F': 6,\n    'G': 7      }\n\nX['loan_grade'] = X['loan_grade'].map(grade_mapping)","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:21.224230Z","iopub.execute_input":"2024-10-03T20:14:21.224653Z","iopub.status.idle":"2024-10-03T20:14:21.237089Z","shell.execute_reply.started":"2024-10-03T20:14:21.224613Z","shell.execute_reply":"2024-10-03T20:14:21.235770Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"X['cb_person_default_on_file'] =X['cb_person_default_on_file'].replace({'Y': 1, 'N': 0})","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:28.934182Z","iopub.execute_input":"2024-10-03T20:14:28.934640Z","iopub.status.idle":"2024-10-03T20:14:28.985893Z","shell.execute_reply.started":"2024-10-03T20:14:28.934594Z","shell.execute_reply":"2024-10-03T20:14:28.984501Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/1481875612.py:1: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  X['cb_person_default_on_file'] =X['cb_person_default_on_file'].replace({'Y': 1, 'N': 0})\n","output_type":"stream"}]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:33.241576Z","iopub.execute_input":"2024-10-03T20:14:33.242013Z","iopub.status.idle":"2024-10-03T20:14:33.262262Z","shell.execute_reply.started":"2024-10-03T20:14:33.241968Z","shell.execute_reply":"2024-10-03T20:14:33.260866Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"rf_clf = RandomForestClassifier(random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:34.652002Z","iopub.execute_input":"2024-10-03T20:14:34.652486Z","iopub.status.idle":"2024-10-03T20:14:34.658952Z","shell.execute_reply.started":"2024-10-03T20:14:34.652436Z","shell.execute_reply":"2024-10-03T20:14:34.657512Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"rf_clf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:14:36.398101Z","iopub.execute_input":"2024-10-03T20:14:36.398563Z","iopub.status.idle":"2024-10-03T20:14:43.845764Z","shell.execute_reply.started":"2024-10-03T20:14:36.398517Z","shell.execute_reply":"2024-10-03T20:14:43.844713Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier(random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"y_pred = rf_clf.predict_proba(X_test)[:,1]","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:16:13.034383Z","iopub.execute_input":"2024-10-03T20:16:13.034866Z","iopub.status.idle":"2024-10-03T20:16:13.296014Z","shell.execute_reply.started":"2024-10-03T20:16:13.034823Z","shell.execute_reply":"2024-10-03T20:16:13.294513Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"test_auc = roc_auc_score(y_test, y_pred)\nprint(f\"Test Set AUC: {test_auc:f}\")","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:17:14.563537Z","iopub.execute_input":"2024-10-03T20:17:14.564001Z","iopub.status.idle":"2024-10-03T20:17:14.578025Z","shell.execute_reply.started":"2024-10-03T20:17:14.563959Z","shell.execute_reply":"2024-10-03T20:17:14.576691Z"},"trusted":true},"execution_count":48,"outputs":[{"name":"stdout","text":"Test Set AUC: 0.939817\n","output_type":"stream"}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\n\nfpr, tpr, thresholds = roc_curve(y_test, y_pred)\nplt.plot(fpr, tpr, label=f'AUC = {test_auc:f}')\nplt.plot([0, 1], [0, 1], linestyle='--')\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate')\nplt.title('ROC Curve')\nplt.legend(loc='lower right')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:17:54.423193Z","iopub.execute_input":"2024-10-03T20:17:54.423645Z","iopub.status.idle":"2024-10-03T20:17:54.801687Z","shell.execute_reply.started":"2024-10-03T20:17:54.423607Z","shell.execute_reply":"2024-10-03T20:17:54.800448Z"},"trusted":true},"execution_count":49,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"dummy_list = [\"person_home_ownership\",\"loan_intent\"]\n\nX_submit = pd.get_dummies(X_submit,columns=dummy_list)\n\ngrade_mapping = {\n    'A': 1,\n    'B': 2,\n    'C': 3,\n    'D': 4,\n    'E': 5,\n    'F': 6,\n    'G': 7      }\n\nX_submit['loan_grade'] = X_submit['loan_grade'].map(grade_mapping)\n\nX_submit['cb_person_default_on_file'] = X_submit['cb_person_default_on_file'].replace({'Y': 1, 'N': 0})","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:26:49.736569Z","iopub.execute_input":"2024-10-03T20:26:49.737029Z","iopub.status.idle":"2024-10-03T20:26:49.797840Z","shell.execute_reply.started":"2024-10-03T20:26:49.736986Z","shell.execute_reply":"2024-10-03T20:26:49.796495Z"},"trusted":true},"execution_count":51,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_30/881068673.py:16: FutureWarning: Downcasting behavior in `replace` is deprecated and will be removed in a future version. To retain the old behavior, explicitly call `result.infer_objects(copy=False)`. To opt-in to the future behavior, set `pd.set_option('future.no_silent_downcasting', True)`\n  X_submit['cb_person_default_on_file'] = X_submit['cb_person_default_on_file'].replace({'Y': 1, 'N': 0})\n","output_type":"stream"}]},{"cell_type":"code","source":"submit_pred = rf_clf.predict_proba(X_submit)[:,1]","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:29:52.579466Z","iopub.execute_input":"2024-10-03T20:29:52.579959Z","iopub.status.idle":"2024-10-03T20:29:53.344684Z","shell.execute_reply.started":"2024-10-03T20:29:52.579913Z","shell.execute_reply":"2024-10-03T20:29:53.343460Z"},"trusted":true},"execution_count":55,"outputs":[]},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'loan_status': submit_pred\n})\n\nsubmission.index = submit_id","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:37:17.583457Z","iopub.execute_input":"2024-10-03T20:37:17.584714Z","iopub.status.idle":"2024-10-03T20:37:17.591619Z","shell.execute_reply.started":"2024-10-03T20:37:17.584651Z","shell.execute_reply":"2024-10-03T20:37:17.590078Z"},"trusted":true},"execution_count":60,"outputs":[]},{"cell_type":"code","source":"submission.to_csv(\"submission.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-10-03T20:37:21.783527Z","iopub.execute_input":"2024-10-03T20:37:21.784656Z","iopub.status.idle":"2024-10-03T20:37:21.866258Z","shell.execute_reply.started":"2024-10-03T20:37:21.784607Z","shell.execute_reply":"2024-10-03T20:37:21.865216Z"},"trusted":true},"execution_count":61,"outputs":[]}]}